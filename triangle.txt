#include <windows.h>
#include <stdio.h>
#include <gl/gl.h>

LRESULT CALLBACK WindowProc(HWND, UINT, WPARAM, LPARAM);
void EnableOpenGL(HWND hwnd, HDC*, HGLRC*);
void DisableOpenGL(HWND, HDC, HGLRC);


int WINAPI WinMain(HINSTANCE hInstance,
                   HINSTANCE hPrevInstance,
                   LPSTR lpCmdLine,
                   int nCmdShow)
{
    WNDCLASSEX wcex;
    HWND hwnd;
    HDC hDC;
    HGLRC hRC;
    MSG msg;
    BOOL bQuit = FALSE;
    float theta = 0.0f;


    wcex.cbSize = sizeof(WNDCLASSEX);              // Register window class
    wcex.style = CS_OWNDC;
    wcex.lpfnWndProc = WindowProc;
    wcex.cbClsExtra = 0;
    wcex.cbWndExtra = 0;
    wcex.hInstance = hInstance;
    wcex.hIcon = LoadIcon(NULL, IDI_APPLICATION);
    wcex.hCursor = LoadCursor(NULL, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);
    wcex.lpszMenuName = NULL;
    wcex.lpszClassName = "GLSample";
    wcex.hIconSm = LoadIcon(NULL, IDI_APPLICATION);;


    if (!RegisterClassEx(&wcex))
        return 0;


    hwnd = CreateWindowEx(0,               // Create main window
                          "GLSample",
                          "Rotating Triangle",
                          WS_OVERLAPPEDWINDOW,
                          CW_USEDEFAULT,
                          CW_USEDEFAULT,
                          800,       //This is to set the size of the output(main)window
                          800,
                          NULL,
                          NULL,
                          hInstance,
                          NULL);

    ShowWindow(hwnd, nCmdShow);


    EnableOpenGL(hwnd, &hDC, &hRC);    // Function to enable OpenGL for the window



    while (!bQuit)    // Main loop of the program

    {
        if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE)) // Check for messages

        {
            if (msg.message == WM_QUIT)              // Handle or dispatch messages
            {
                bQuit = TRUE;

            }
            else
            {
                TranslateMessage(&msg);
                DispatchMessage(&msg);
            }
        }

        else

        {

            glClearColor(0.5f, 0.40f, 0.5f, 0.5f);     // OpenGL animation code goes here
            glClear(GL_COLOR_BUFFER_BIT);                       // Set the background color as Lavendar

            glPushMatrix();
            glRotatef(theta, 1.0f, 0.0f, 1.0f);                 // Set rotation axis co-ordinates

            glBegin(GL_TRIANGLES);                             // Color and position of the triangle's vertices


                glColor3f(1.0f, 0.25f, 0.50f);   glVertex2f(0.0f,   1.0f);
                glColor3f(0.85f, 1.0f, 0.50f);   glVertex2f(0.87f,  -0.5f);
                glColor3f(0.25f, 0.50f, 1.0f);   glVertex2f(-0.87f, -0.5f);


            glEnd();

            glPopMatrix();

            SwapBuffers(hDC);

            theta -= 2.0f;        // Set speed of rotation

            Sleep (1);
        }
    }


    DisableOpenGL(hwnd, hDC, hRC);    // Shutdown OpenGL

    DestroyWindow(hwnd);             // Destroy window explicitly

    return msg.wParam;
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)


{

    switch (uMsg)
    {

        case WM_CLOSE:
            PostQuitMessage(0);
        break;

        case WM_DESTROY:

            return 0;


        case WM_KEYDOWN:
        {
            switch (wParam)
            {
                case VK_ESCAPE:
                    PostQuitMessage(0);
                break;
            }
        }
        break;

        default:

            return DefWindowProc(hwnd, uMsg, wParam, lParam);

    }

    return 0;
}



void EnableOpenGL(HWND hwnd, HDC* hDC, HGLRC* hRC)


{
    PIXELFORMATDESCRIPTOR pfd;

    int iFormat;


    *hDC = GetDC(hwnd);        // Get the device context (DC)


    ZeroMemory(&pfd, sizeof(pfd));  // Set the pixel format for the DC


    pfd.nSize = sizeof(pfd);
    pfd.nVersion = 1;
    pfd.dwFlags = PFD_DRAW_TO_WINDOW |
                  PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
    pfd.iPixelType = PFD_TYPE_RGBA;
    pfd.cColorBits = 24;
    pfd.cDepthBits = 16;
    pfd.iLayerType = PFD_MAIN_PLANE;


    iFormat = ChoosePixelFormat(*hDC, &pfd);


    SetPixelFormat(*hDC, iFormat, &pfd);


    *hRC = wglCreateContext(*hDC);    // Create and enable the render context (RC)


    wglMakeCurrent(*hDC, *hRC);
}

void DisableOpenGL (HWND hwnd, HDC hDC, HGLRC hRC)

{
    wglMakeCurrent(NULL, NULL);
    wglDeleteContext(hRC);
    ReleaseDC(hwnd, hDC);
}
